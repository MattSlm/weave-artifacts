syntax = "proto3";

package org.sparkweave.schema;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  flat_package: true
};

// The main data unit for shuffle exchange
message WeaveRecord {
  bool is_fake = 1;

  oneof key {
    string key_str = 2;
    int32 key_int = 3;
    int64 key_long = 4;
  }

  oneof value {
    string val_str = 5;
    int32 val_int = 6;
    int64 val_long = 7;
  }
}

// Reducer tells mapper: "I am reducer 3, give me my data"
message ConnectRequest {
  int32 reducer_id = 1;
}

// Optional: ack or confirmation message
message Ack {
  string message = 1;
}

// === gRPC service ===
service WeaveShuffleService {
  // Reducer calls this and receives streaming records from the mapper
  rpc Connect(ConnectRequest) returns (stream WeaveRecord);

  // Optional: mappers can push records (e.g., for push-based shuffle)
  rpc PushRecord(stream WeaveRecord) returns (Ack);
  rpc ConnectStream(ConnectRequest) returns (stream WeaveRecord);
}
